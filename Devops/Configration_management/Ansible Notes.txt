

 CONFIGRATION_MANAGMENT - Ansible
 
 What is ansible?
 Ansible is a configration management tool. Which is used to manage server, upgrates, patching and installation made easy across servers.
 
 Configration tools avilable are - Ansible, Puppet, chef, salt.
 
 What is Ansible ?
  Ansible is an open source IT automation engine that automates
  
  provisioning
  configuration management
  application deployment
  orchestration
  and many other IT processes. It is free to use, and the project benefits from the experience and intelligence of its thousands of contributors.
 
 Why ansible?
 
 answers: 
   1. agentless architecture : Ansible uses ssh or winRM to login so we are not required to install any agents on target machine.
   2. Uses simple language - YAML where as chef required ruby and puppet required DLS.
   3. Module are python based for we can easy to create module or understands
   4. Push-Based Execution.
   5. support for windowns and linux.
   
                                                    Quick Comparison Table
        Feature	         Ansible	          Puppet	              Chef	                 SaltStack
        Language         	YAML	         DSL (Ruby)	              Ruby	                 YAML + Python
        Agentless	      ✅ Yes	         ❌ No                 	❌ No	                 ✅ Yes (optional)
        Ease of Setup	  ✅ Easy	         ❌ Complex	            ❌ Complex	             ✅ Moderate
        Learning Curve	  ✅ Low	         ❌ Medium	            ❌ High	                 ✅ Moderate
     Community & Modules  ✅ Strong	         ✅ Strong	            ✅ Good	                 ✅ Growing
        Best for	     Simplicity, Cloud	Large-scale infra	   Complex logic	      High-speed automation
  
 
  Disadvantages:
   1. Performance on Large Scale
        Ansible is not optimized for large-scale parallelism out of the box.

        Since it uses SSH for each task, performance may lag when managing thousands of nodes simultaneously.
		
		
   2. Error Handling Can Be Limited. 
       Diffulties in detecting changes. need to re-run playbook.
	   
   3. Windows Support is Improving But Not Perfect.

   4. No Built-in Scheduling.


   Key Concepts:
     1. Inventory: List of hosts to manage.
   
     2. Playbook: YAML file that defines a set of tasks.
   
     3. Modules: Pre-written code to perform tasks (e.g., yum, copy, user, service).
   
     4. Tasks: Actions to be performed.
   
     5. Roles: Structure to organize playbooks.
   
     6. Facts: System info collected from target nodes.
   
     7. Handlers: Run only when notified (used for changes like restarting services).   
   
   
   
   Installation & Setup:
     1. Install Ansible: sudo apt install ansible or sudo yum install ansible
   
     2. Inventory file (default): /etc/ansible/hosts
   
     3. Test connection: ansible all -m ping
	 
	 
	 
	 More on inventory file:
	 
	1. we can add target machines on inventory files.
	 host1
	 host2
	 host3
	 
	2.  we can group them 
	   [webserver]
	    host1
	   [database server]
	    host2
	    [backend server]
	    host3
	 
	 3. we can add alias to host name like
	     web ansible_host=host1
	     database ansible_host=host2
	     backend ansible_host=host3
		 
		 
     4. other parameters we can added 
	   
	   ansible_connections
	   ansible_port
	   ansible_user
	   ansible_ssh_pass
	   
	   To estabilish connection between host and target use - ssh_keygen 
	   copy public get from target machine and store in authorisation in ansible machine
	   
	   
	   
	-----------------------------------------------------------------------------------------------------------------------

  How to setup Passwordless Authentication
   EC2 Instances
   
   a. Using Public Key:
   
   ssh-copy-id -f "-o IdentityFile <PATH TO PEM FILE>" ubuntu@<INSTANCE-PUBLIC-IP>
   
   EXPLAINATION:
 
   1. ssh-copy-id: This is the command used to copy your public key to a remote machine.
   2. -f: This flag forces the copying of keys, which can be useful if you have keys already set up and want to overwrite them.
   3. "-o IdentityFile ": This option specifies the identity file (private key) to use for the connection. The -o flag passes this 
                      option to the underlying ssh command.
   4. ubuntu@: This is the username (ubuntu) and the IP address of the remote server you want to access.
   
   b. Using Password:
   
    1. Go to the file /etc/ssh/sshd_config.d/60-cloudimg-settings.conf
    2. Update PasswordAuthentication yes
    3. Restart SSH -> sudo systemctl restart ssh	
	
	
--------------------------------------------------------------------------------------------------------------------------------------------

  INVENTORY:
   Ansible inventory file is a fundamental component of Ansible that defines the hosts (remote systems) that you want to manage and the groups those hosts belong to. The inventory file can be static (a simple text file) or dynamic (generated by a script). 
   It provides Ansible with the information about the remote nodes to communicate with during its operations.  
   
   
   create Inventory.ini   - This is recommanded as each team h full control of inventory file
   Give the path of the file location
   
   Also you can create in /etc/ansible/hosts/  - work as a default inventory
   
   We can group servers using [web] ,[App] Like this in inventory file
   
------------------------------------------------------------------------------------------------------------------------------------------------

 ADHOC Commands:
  There are two ways to WRITE command 1. Playbook and other way is adhoc commands

   COMMAND:
     ansible [pattern] -m [module] -a "[module options]"
	 
     ansible [-i LOCATION] [-m MODULE] [-a ARGUMENTS] servers
	
     ansible -i inventory.ini -m ping all    
	 
	 
	 SOME ADHOC COMMAND:
	 
	 ansible webservers -m ansible.builtin.service -a "name=httpd state=started"
	 ansible webservers -m ansible.builtin.service -a "name=httpd state=restarted"
	 ansible webservers -m ansible.builtin.service -a "name=httpd state=stopped"
	 
	 ansible all -m ansible.builtin.user -a "name=foo password=<encrypted password here>"
     ansible all -m ansible.builtin.user -a "name=foo state=absent"
	 
	 ansible webservers -m ansible.builtin.yum -a "name=acme state=present"
	 ansible webservers -m ansible.builtin.yum -a "name=acme-1.5 state=present"
	 ansible webservers -m ansible.builtin.yum -a "name=acme state=latest"
	 ansible webservers -m ansible.builtin.yum -a "name=acme state=absent"
	 
---------------------------------------------------------------------------------------------------------------------------------------------------

 PLAYBOOK: ansible playbook -i inventory.ini myfile.yaml
  
  ---
  - name: updating web server
    hosts: webserver
    user: root
    tasks: 
      - name: Ensure apache is at the latest version
        ansible.builtin.yum:
          name: httpd
          state: latest
      - name: Write the apache config file
        ansible.builtin.template:
          src: /srv/httpd.j2
          dest: /etc/httpd.conf
  - name: update db servers
    hosts: databases
    user: root  
    tasks:
      - name: Ensure postgresql is at the latest version	
	    ansible.builtin.yum:
		  name: postgresql
		  state: latest
	  - name: Ensure that postgresql is started
	    ansible.builtin.service:
		  name: postgresql
		  state: started
		  
		  
------------------------------------------------------------------------------------------------------------------------------------------------

  ANSIBLE ROLES:
  
  An Ansible role is a reusable, self-contained unit of automation that is used to organize and manage tasks, variables, files, templates, and handlers in a structured way.

  Roles help to encapsulate and modularize the logic and configuration needed to manage a particular system or application component.

  This modular approach promotes reusability, maintainability, and consistency across different playbooks and environments.
 
  Key Components of an Ansible Role:
    1. Task : The main list of actions that the role performs.
	
	2. Handlers: Tasks that are triggered by changes in other tasks, typically used for actions like restarting services.
	
	3. Files: Static files that need to be transferred to managed hosts.
	
	4. Templates: Jinja2 templates that can be rendered and transferred to managed hosts or dynamic files .
	
	5. Vars: Variables that are used within the role.
	
	6. Defaults: Default variables for the role, which can be overridden.
	
	7. Meta: Metadata about the role, including dependencies on other roles.
    
	8. Library: Custom modules or plugins used within the role.
	
	9. Module_defaults: Default module parameters for the role.
	
	10. Lookup_plugins: Custom lookup plugins for the role. 
	
	
---------------------------------------------------------------------------------------------------------------------------------------------------

  ANSIBLE GALAXY:
  
     Ansible Galaxy is a hub for finding, sharing, and reusing Ansible content such as roles, collections, and plugins. It's like a marketplace or repository where Ansible users and developers contribute reusable automation.
	 
	 
  	 
     What is Ansible Galaxy?
	 Ansible Galaxy provides:
	 1. Roles: Pre-packaged units of Ansible automation.
	 2. Collections: A distribution format that can include roles, modules, plugins, and docs.
	 3. Community & Certified Content: Community content is from users; certified content is supported by vendors and Red Hat.
	 
	 



	  